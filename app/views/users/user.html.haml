- time = Time.at(@data["about"]["created"])
- now = Time.now
- if time.month == now.month && time.day = now.day
  .alert.alert-success
    %i{:class => 'fa fa-fw fa-gift'}
    It's
    = @username + "'s"
    cake day!

%h1.heading
  About
  = @username
  %hr{style: 'width:400px;'}
%h2.heading
  Link Karma
  %span{:class => 'label label-warning'}= @data["about"]["link_karma"]
%h2.heading
  Comment Karma
  %span{:class => 'label label-warning'}= @data["about"]["comment_karma"]
%h2.heading
  Account Age
  %span{:class => 'label label-warning'}= time_ago_in_words(Time.at(@data["about"]["created"])) + ' old'
%h2.heading
  Moderator
  %span{:class => 'label label-' + (@data["about"]["is_mod"] == true ? 'success' : 'danger')}
    = (@data["about"]["is_mod"] == true ? 'Yes' : 'No')
%br


%h1.heading
  Recent comments from
  = @username
%hr{style: 'width:400px;'}
%h2.heading Breakdown by Subreddit
#comments-pie
  %svg{style: 'width:600px; height: 600px;'}
%br

%h1.heading
  Recent submissions from
  = @username
%hr{style: 'width:400px;'}
%h2.heading Breakdown by Subreddit
#submissions-pie
  %svg{style: 'width:600px; height: 600px;'}

%h1.heading Comment Karma Gained
%hr{style: 'width:400px;'}
#comment-karma
  %svg{style: 'width:600px; height: 600px;'}

%h1.heading Link Karma Gained
%hr{style: 'width:400px;'}
#link-karma
  %svg{style: 'width:600px; height: 600px;'}

%br
%br
%center
  %a{href: '/json/' + @username + '?formatted=true', :class => 'btn btn-primary btn-lg'} Get The JSON
- 5.times do
  %br


:javascript
  // comments pie chart
  nv.addGraph(function() {
    var chart = nv.models.pieChart()
        .x(function(d) { return d.label })
        .y(function(d) { return d.value })
        .showLabels(true);

      d3.select("#comments-pie svg")
          .datum(commentsPie())
        .transition().duration(1200)
          .call(chart);

    return chart;
  });

  // submissions pie chart
  nv.addGraph(function() {
    var chart = nv.models.pieChart()
        .x(function(d) { return d.label })
        .y(function(d) { return d.value })
        .showLabels(true);

      d3.select("#submissions-pie svg")
          .datum(submissionsPie())
        .transition().duration(1200)
          .call(chart);

    return chart;
  });

  // upvotes
  nv.addGraph(function() {
    var chart = nv.models.stackedAreaChart()
                  .x(function(d) { return d[0] })
                  .y(function(d) { return d[1] })
                  .clipEdge(true);

    chart.xAxis
        .showMaxMin(false)
        .tickFormat(function(d) { return d3.time.format('%x')(new Date(d * 1000))});

    chart.yAxis
        .tickFormat(d3.format(',.2f'));

    d3.select('#comment-karma svg')
      .datum(commentKarma())
        .transition().duration(500).call(chart);

    nv.utils.windowResize(chart.update);

    return chart;
  });

  nv.addGraph(function() {
    var chart = nv.models.stackedAreaChart()
                  .x(function(d) { return d[0] })
                  .y(function(d) { return d[1] })
                  .clipEdge(true);

    chart.xAxis
        .showMaxMin(false)
        .tickFormat(function(d) { return d3.time.format('%x')(new Date(d * 1000)) });

    chart.yAxis
        .tickFormat(d3.format(',.2f'));

    d3.select('#link-karma svg')
      .datum(linkKarma())
        .transition().duration(500).call(chart);

    nv.utils.windowResize(chart.update);

    return chart;
  });


  // datums
  function commentsPie() {
    return jQuery.parseJSON('#{@data["comment_percentiles"].to_json}')
  }
  function submissionsPie() {
    return jQuery.parseJSON('#{@data["submission_percentiles"].to_json}')
  }
  function commentKarma() {
    return jQuery.parseJSON('#{@data["comment_karma"].to_json}')
  }
  function linkKarma() {
    return jQuery.parseJSON('#{@data["link_karma"].to_json}')
  }

